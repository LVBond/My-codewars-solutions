\\ In ["NORTH", "SOUTH", "EAST", "WEST"], the direction "NORTH" + "SOUTH" is going north and coming back right away.
\\ The path becomes ["EAST", "WEST"], now "EAST" and "WEST" annihilate each other, therefore, the final result is [] (nil in Clojure).
\\ In ["NORTH", "EAST", "WEST", "SOUTH", "WEST", "WEST"], "NORTH" and "SOUTH" are not directly opposite but they become directly opposite after the reduction of "EAST" and "WEST" so the whole path is reducible to ["WEST", "WEST"].
\\ Task. Write a function dirReduc which will take an array of strings and returns an array of strings with the needless directions removed (W<->E or S<->N side by side).

function dirReduc(arr){
  if (arr.length <= 1) return arr;
  let flag = true;
  while (flag) {
    for (let i = 0; i < arr.length - 1; i++){
      if((arr[i] == 'NORTH' && arr[i+1] == 'SOUTH') || +         
        (arr[i] == 'SOUTH' && arr[i+1] == 'NORTH') || +
        (arr[i] == 'WEST' && arr[i+1] == 'EAST') || +
        (arr[i] == 'EAST' && arr[i+1] == 'WEST')) {
        arr.splice(i, 2);
        i -= 2; // We deleted two elements of an array, indices moved to 2
        }
      else flag = false;
    }
  }

return arr;
  
}

console.log(dirReduc(["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"]));  // ["WEST"]
